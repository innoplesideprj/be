# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

permissions:
  checks: write
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Make properties
      if: contains(github.ref, 'main')
      run: |
        echo "ls -a . & pwd"
        pwd
        ls -a .
        echo "mkdir & touch"
        mkdir -p ./src/main/resources 
        cd ./src/main/resources
        touch ./application-develop.properties
        pwd
        ls -a .
        echo "copy properties"
        cat application-develop.properties
      shell: bash
      env:
        spring.datasource.driver-class-name: com.mysql.cj.jdbc.Driver
        spring.datasource.url: ${{ secrets.DATASOURCE_HOST }}
        spring.datasource.username: ${{ secrets.DATASOURCE_USERNAME }}
        spring.datasource.password: ${{ secrets.DATASOURCE_PASSWORD }}

    - name: Setup MySQL
      uses: mirromutth/mysql-action@v1.1
      with:
        mysql root password: ${{ secrets.DATASOURCE_PASSWORD }}
        mysql database: innople 
        mysql user: ${{ secrets.DATASOURCE_USERNAME }} 
        mysql password: ${{ secrets.DATASOURCE_PASSWORD }} 

          
    - name: 🐳 gradlew 실행 권한 설정
      run: chmod +x gradlew
      
    - name: Build with Gradle Wrapper
      #env:
        #spring.datasource.driver-class-name: com.mysql.cj.jdbc.Driver
        #spring.datasource.url: ${{ secrets.DATASOURCE_HOST }}
        #spring.datasource.username: ${{ secrets.DATASOURCE_USERNAME }}
        #spring.datasource.password: ${{ secrets.DATASOURCE_PASSWORD }}
      run: ./gradlew --info test

    - name: 🐳 테스트 결과 Report
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()  # 테스트가 실패하여도 Report를 보기 위해 `always`로 설정
      with:
         files: 'build/test-results/**/*.xml'
    
    - name: 🐳 테스트 실패 Comment
      uses: mikepenz/action-junit-report@v4
      if: always()
      with:
        report_paths: 'build/test-results/test/TEST-*.xml'
#출처: https://ttl-blog.tistory.com/1350
    
#종속성 제출 -> 프로젝트 종속성에 대한 보안 알림 활성화
  dependency-submission:

    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    # Generates and submits a dependency graph, enabling Dependabot Alerts for all project dependencies.
    # See: https://github.com/gradle/actions/blob/main/dependency-submission/README.md
    - name: Generate and submit dependency graph
      uses: gradle/actions/dependency-submission@417ae3ccd767c252f5661f1ace9f835f9654f2b5 # v3.1.0
